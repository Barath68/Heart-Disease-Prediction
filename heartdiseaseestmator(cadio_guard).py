# -*- coding: utf-8 -*-
"""heartdiseaseestmator(cadio-guard).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dl1-aVH9bYtSAJQ91CGxfBkDxC4kD_Xm
"""

import pandas as pd
import numpy as np

df=pd.read_csv("/content/heart.csv")

df.head()

df.isnull()

df.isnull().sum()

X=df.iloc[:,:13]
y=df.iloc[:,[13]]
X = X.to_numpy()
y = y.to_numpy()

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

knn= KNeighborsClassifier(n_neighbors=14)
knn.fit(X_train,y_train)

y_predit=knn.predict(X_test)
acc=accuracy_score(y_test,y_predit)
print("_________________________________________")
print("Accuracy",acc)
print("_________________________________________")

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import accuracy_score

random_forest_model = RandomForestRegressor(n_estimators=13, random_state=42)
random_forest_model.fit(X_train, y_train)
predictions = random_forest_model.predict(X_test)
accrf=accuracy_score(y_test,y_predit)
print("_________________________________")
print("Accuracy Score:",accrf)
print("_________________________________")

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
acc=accuracy_score(y_test, y_predit)
recall = recall_score(y_test, y_predit,average='macro')
precision = precision_score(y_test, y_predit,average='macro')
f1_score = f1_score(y_test, y_predit,average='macro')

print("Accuracy   %.4f"%(acc*100),"%")
print("RECALL     %.4f"%(recall*100),"%")
print("Precision  %.4f"%(precision*100),"%")
print("F1-Score   %.4f"%(f1_score*100),"%")

print(X_train.shape)
print(y_test.shape)

if X.shape[0] != y.shape[0]:
  print("X and y rows are mismatched, check dataset again")

age=int(input("Enter Your Age:"))
Gender = int(input("Enter Your Gender(1-M/0-F):"))
cp=int(input("Enter Chest Pain Level:"))
trestpbs = int(input("Enter Resting Blood Pressure Level:"))
chols=int(input("Enter Cholestrol Level:"))
fbs = int(input("Enter Fasting Blood Sugar:"))
restcg = int(input("Enter Resting ECG result:"))
thalach = int(input("Enter Max Heart rate Achieved:"))
exang = int(input("Enter induced Angina:"))
oldpeak = int(input("Enter OldPeek:"))
slope = int(input("Enter slope:"))
ca = int(input("Enter Major vessels:"))
thal = int(input("Enter thalassemia:"))

p = [age,Gender,cp,trestpbs,chols,fbs,restcg,thalach,exang,oldpeak,slope,ca,thal]
print(p)


knn = KNeighborsClassifier(n_neighbors=13)
knn.fit(X_train,y_train)
y_predit= knn.predict([p])
print("_______________________")
print("Predicted Output:")
print(y_predit)
print("_______________________")

X_train.shape

y_test.shape

print(y_test)

print(X_train)

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error


random_forest_model = RandomForestRegressor(n_estimators=13, random_state=42)
random_forest_model.fit(X_train, y_train)
predictions = random_forest_model.predict(X_test)
mse = mean_squared_error(y_test, predictions)
print("Mean Squared Error:", mse)
new_input = np.array([[age,Gender,cp,trestpbs,chols,fbs,restcg,thalach,exang,oldpeak,slope,ca,thal]])
predicted_output = random_forest_model.predict(new_input)
print("____________________________________________")
print("IN RANDOM FOREST")
print("Predicted Output:", predicted_output)
print("____________________________________________")

